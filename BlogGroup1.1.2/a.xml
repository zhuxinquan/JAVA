luguo0816的专栏 http://blog.csdn.net http://static.blog.csdn.net/images/logo.gif http://blog.csdn.net/luguo0816 zh-cn http://blog.csdn.net 5 Copyright &copy; luguo0816 2016/4/14 22:34:44 <![CDATA[[原]研究ecmall一些流程、结构笔记]]> http://blog.csdn.net/luguo0816/article/details/9029563 http://blog.csdn.net/luguo0816/article/details/9029563 luguo0816 2013/6/5 12:18:12 index.php<br> ECMall::startup() //ecmall.php<br> <br> object //所有类的基础类 ecmall.php<br> BaseApp //控制器基础类 app.base.php<br> ECBaseApp //ecapp.base.php<br> FrontendApp //前台控制器基础类 frontend.base.php<br> MallbaseApp //商城控制器基类 frontend.base.php<br> default.app.php //以上的类是defaultApp类的父类<br> <br> 根目录表示@（在这表示wwwroot/ecmall）<br> @index.php(根目录下的index.php文件,即wwwroot/ecmall/index.php)<br> <br> <br> @index.php(加载配置文件config.inc.php和核心文件ecmall.php)<br> =&gt;ECMall::startup();<br> =&gt;ecmall.php<br> =&gt;startup();<br> =&gt;require(ROOT_PATH.'/app'.&quot;/{$app}.app.php&quot;);(加载控制器,默认为default.app.php)<br> =&gt;do_action();(DefaultApp类的方法)<br> =&gt;default.app.php<br> =&gt;do_action();(do_action在,defaultApp父类MallbaseApp的父类FrontendApp的父类ECBaseApp中,<br> 其中类MallbaseApp和类FrontendApp在frontend.base.php文件中,ECBaseApp类在ecapp.base.php文件中)<br> =&gt;parent::do_action();(即类ECBaseApp的父类BaseApp的成员函数do_action()(不是静态成员,若为静态成员parent改为类名),<br> 其中BaseApp类在app.base.php文件中)<br> =&gt;_run_action();<br> =&gt;$this-&gt;$action();($action=$this-&gt;_curr_action,在这是等于index)<br> <br> <br> <br> <br> <br> deault.app.php(DefaultApp类)<br> =&gt;index();<br> =&gt;$this=&gt;assign();<br> =&gt;app.base.php(BaseApp类)<br> =&gt;assign();<br> =&gt;_init_view();<br> =&gt;$this-&gt;_view=&amp; v();<br> =&gt;ecmall.php(object类)<br> =&gt;&amp; v();(加载了/eccore/view/template.php,ecsTemplate类)<br> =&gt;app.base.php(BaseApp类)<br> =&gt;$this-&gt;_view-&gt;assign();(此时的$this-&gt;_view为ecsTemplate类的一个实例)<br> =&gt;template.php(ecsTemplate类)<br> =&gt;assign();<br> =&gt;$this-&gt;_var[$key]=$val;<br> <br> <br> &gt;default.app.php(DefaultApp类)<br> =&gt;display()<br> =&gt;frontend.base.php<br> =&gt;display()<br> <br> <br> seo(即title,description,keywords)<br> $this-&gt;_config_seo(array('title'=&gt;'...',...));//设置title标签的<br> =&gt;ecapp.base.php(ECBaseApp类)<br> =&gt;_config_seo();<br> =&gt;_assign_seo();<br> =&gt;_get_seo_code();//生成html代码,如$html.=&quot;&lt;{$type}&gt;{$info}&lt;/{$type}&gt;&quot;;<br> <br> <br> <br> <br> <br> frontend.base.php(FrontendApp类,line 17-18)<br> 加载lang配置文件,<br> Lang::load(lang_file('common));<br> //加载了每个应用的配置<br> Lang::load(lang_file(APP));<br> ecmall.php()<br> =&gt;lang_file();ROOT_PATH . '/languages/' . LANG . '/' . $file . '.lang.php';(config.inc.php中'LANG'=&gt;'sc-utf-8')<br> ecapp.base.php(ECBaseApp类)<br> =&gt;加载了Conf配置,在line 114,Conf::load($setting-&gt;getAll());<br> <br> <br> <br> 初始化方向<br> ecmall.php(122,require($app_file,如default.app.php))<br> =&gt;default.app.php(DefaultApp类)<br> =&gt;frontend.base.php(类MallbaseApp和类FrontendApp)<br> =&gt;MallbaseApp<br> =&gt;FrontendApp<br> Lang::load(lang_file('common'));<br> Lang::load(lang_file(APP));<br> =&gt;ecapp.base.php(ECBaseApp类)<br> =&gt;ECBaseApp<br> -&gt;$setting=af();加载了/includes/arrayfile.base.php和/include/arrayfiles/$type(如,settings).arrayfile.php<br> -&gt;$setting-&gt;getAll();执行了settings.arrayfile.php中get_default()和arrayfile.base.php中的_loadfromfile();<br> $this-&gt;_init_visitor();(Line116)(但执行了frontend.base.php中的FrontendApp类的成员函数_init_visitor(),跟<br> frontend.base.php中的类UserVisitor和ecapp.base.php中的类BaseVisitor相关)<br> =&gt;app.base.php(BaseApp类)<br> =&gt;BaseApp<br> $this-&gt;_init_session();//$GLOBALS['EC_ENV']<br> =&gt;ecmall.php(object类)<br> <br> <br> ecapp.base.php(line 146)<br> env('session',$this-&gt;_session);//实现$GLOBALS['EC_ENV']['session']=$this-&gt;_session;<br> <br> <br> app.base.php()<br> -&gt;display<br> -&gt;_init_view();<br> -&gt;_config_view();//ecapp.base.php<br> <br> <br> <br> 模板文件夹themes/mall/default<br> 控制器存放文件夹/app<br> 模板编译文件夹temp/compiled<br> <br> <br> <br> default.app.php(display())<br> =&gt;template.php()<br> -&gt;display();<br> -&gt;fetch();<br> -&gt;make_compiled();<br> -&gt;fetch_str();<br> -&gt;smarty_prefilter_preCompile(); //去除&lt;!-- --&gt;,提取{}里面的内容,把它发送到select();函数中去<br> -&gt;select(); //解析{}里面内容<br> <br> <br> <br> login.html<br> 有一表单action属性的&#20540;为空则当前action的&#20540;为当前窗口的url<br> <br> <br> <br> <br> 登陆验证码<br> settings.arrayfile.php<br> 需'captcha_status'=&gt;array('login'=&gt;1),默认是空数组<br> FrontendApp::login();<br> if(Conf::get('captcha_status.login')){$this-&gt;assign('captcha',1);}<br> login.html<br> 包含如下代码，即$captcha为真时，则显示验证码代码，为非真时则不执行验证码代码<br> &lt;!--{if $captcha}--&gt;<br> &lt;tr&gt;&lt;td&gt;{$lang.captcha}:&lt;/td&gt;<br> &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;captcha&quot; class=&quot;text&quot; id=&quot;captcha1&quot; /&gt;<br> &lt;span&gt;&lt;a href=&quot;javascript:change_captcha($('#captcha'));&quot; class=&quot;renewedly&quot;&gt;<br> &lt;img id=&quot;captcha&quot; src=&quot;index.php?app=captcha&amp;{$random_number}&quot; /&gt;&lt;/a&gt;<br> &lt;/span&gt;&lt;/td&gt;<br> &lt;/tr&gt;<br> &lt;!--{/if}--&gt;<br> <br> <br> <br> <br> <br> <br> <br> 模型<br> ecmall.php<br> &amp;db();创建MySql数据库对象实例<br> include_once(ROOT_PATH.'/eccore/model/mysql.php');<br> return new cls_mysql();<br> &amp;m();获得一个模型<br> ROOT_PATH.'/includes/models/'.$model_name.'.model.php';<br> return new $model_name($params,db());<br> <br> global.lib.php<br> &amp;ms();会员系统连接接口<br> include(ROOT_PATH.'/includes/passport.base.php')<br> //config.inc.php,MEMBER_TYPE=&gt;'default',default(使用内置的用户系统)<br> include(ROOT_PATH.'/include/passports/'.MEMBER_TYPE.'.passport.php');<br> return new ucfirst(MEMBER_TYPE).'Passport';<br> <br> 联接<br> 自定模型属性$_relation=array();<br> <br> 在某模块中查询数据,如$this-&gt;_user_mod-&gt;find(array(..,'join'=&gt;'..,..',..));<br> BaseModel::find();<br> $this-&gt;_joinModel($tables,$join);<br> $this-&gt;_getJoinString($_im);<br> <br> $_relation['dependent']='true'。如果该在member模型定义与store模型关系。则意思即，store属于(belong to)member。<br> store模型对参考模型的依赖,删除时用到<br> <br> has_one,belongs_to 在自定义模型设置的模型关系。区别在BaseModel::_getJoinString();函数中,如果是HAS_ONE,<br> 则$refer_key=$this-&gt;$prikey;如果是BELONGS_TO,则$refer_key=$model-&gt;$prikey; $prikey是在自定义模型里设置的变量,$this和$model分别是这两个模型<br> 关系分别关联的模型的实例的引用<br> <br> reverse,是在type为belongs_to关系中，&#20540;是为一个自定模型的关系名称。如果在member.model.php有$_relation(..,'manage_store'=&gt;array('model'=&gt;'store','reverse'=&gt;'be_manage',..),..);<br> 则M('store')的$_relation属性中就有be_manage关系。<br> <br> has_one<br> 本表参考键=外表外键<br> belongs_to<br> 本表外键=外表参考键<br> has_and_belongs_to_many<br> 本表主键=中间表外键<br> <br> 中间表意思就是这个表是两个表之间的关系表,如会员表跟角色表的关系表就是中间表,这个表必须包含有这两个表的主键,如果会员表<br> 名为user而角色表名为role则中间表为user_role<br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> <br> 后台的登陆页,/ecmall/admin/index.php<br> =&gt;ECMall::startup();<br> =&gt;ecmall.php<br> =&gt;startup();<br> =&gt;require(dirname(__FILE__).'/app'.&quot;/{$app}.app.php&quot;);(加载控制器,默认为default.app.php)<br> =&gt;do_action();(do_action在,defaultApp父类MallbaseApp的父类FrontendApp的父类ECBaseApp中,<br> 其中类MallbaseApp和类FrontendApp在frontend.base.php文件中,ECBaseApp类在ecapp.base.php文件中)<br> =&gt;app.base.php<br> =&gt;do_action();ECBaseApp类父类BaseApp的方法)<br> =&gt;backend.base.php<br> =&gt;_run_action();<br> =&gt;$this-&gt;login();或parent::_run_action();(ecapp.base.php)<br> <br> ***********************************************************************************************************************<br> <br> 模板<br> 显示挂件<br> template::display_widgets();<br> FrontendApp::display_widgets();<br> include_once '/includes/widget.base.php';<br> &amp;widget(); //widget.base.php<br> include_once('external/widgets/'.$name.'/main.widget.php'); //$name&#20540;如,notice<br> return new $name.'Widget'();<br> BaseWidget::BaseWidget();<br> $this=id,widget_path,widget_root,_view,_view-&gt;lib_base,options;<br> assign=options,widget_root,id,name<br> $widget-&gt;display(); //frontendApp::display_widgets();$widget=new $name.'Widget'();<br> BaseWidget::display();<br> echo BaseWidget::get_contents();<br> BaseWidget::get_contents();<br> NoticeWidget::_get_data();<br> assgin=widget_data,options,widget_root<br> BaseWidget::_wrap_contents();<br> <br> <br> ***********************************************************************************************************************<br> eccore/ecmall.php<br> class Object function _error($msg,$obj=''); //eccore/model/model.base.php中有实例<br> <div> 作者：luguo0816 发表于2013/6/5 12:18:12 <a href="http://blog.csdn.net/luguo0816/article/details/9029563">原文链接</a> </div> <div> 阅读：3671 评论：0 <a href="http://blog.csdn.net/luguo0816/article/details/9029563#comments" target="_blank">查看评论</a> </div> <![CDATA[[转]【输入法切换】解决ctrl+space,ctrl+shift切换输入法设置问题]]> http://blog.csdn.net/luguo0816/article/details/7783373 http://blog.csdn.net/luguo0816/article/details/7783373 luguo0816 2012/7/25 9:56:15 <p><a href="http://blog.sina.com.cn/s/blog_719aa47c0100ysyx.html">http://blog.sina.com.cn/s/blog_719aa47c0100ysyx.html</a></p> <p><br> </p> <p>方法1：如何解决ctrl&#43;space切换输入法设置问题<br> 前两天由于一个软件的热键冲突，我修改了WinXP输入法切换的热键，把ctrl&#43;space 热键修改了。可当 我想改回来时，发现无论如何也改不回来了。设置热键是总有一个Shift是必选的。于是在网上查了好久，终于查到这篇“强文”，解决了这个问题。不过，还 是不明白原理是什么，也许是微软的一个BUG.<br> 首先任务栏上的输入法图标上点右键选择设置。<br> 然后选择键设置，第一个“在不同的输入语言之间切换”先勾选“切换输入语言”下面选择左手ALT。取消右边“切换键盘布局”前的勾。<br> 然后进入“中文（简体）输入法 - 输入法/非输入法切换”，取消“启用按键顺序”前的勾。一路都确定后推出设置。<br> 再次进入设置，进入“在不同的输入语言之间切换”，把右边那个打上勾。确定后退出。<br> 完美解决了无法使用ctrl&#43;shift以及ctrl&#43;space切换输入法的问题。<br> 方法2：还原ctrl&#43;space开启/关闭输入法<br> 朋友的机器无法使用ctrl&#43;space来开启/关闭输入法了， 只能使用ctrl&#43;shift&#43;space，觉得很不方便。求救于我，我试了一下，在输入法设置面板中，默认是使用ctrl&#43;space的，但设置的对话 框中无论怎么做都会多出一个shift来，所以上网search了一下，呵呵~有幸找到解决方法了：<br> 更改热键前系统默认的注册表中相关键&#20540;为：<br> HKEY_USERS\S-1-5-21-3384431287-1875203719-1061035024-1005\Control Panel\Input Method\Hot Keys\00000010<br> 下的<br> Key Modifiers子键<br> 此键&#20540;为02C00000代表ctrl&#43;space，如果为06C00000则为ctrl&#43;shift&#43;space。把此&#20540;改回后重启就可解决问题<br> 了。<br> 随<br> 方法3：还原ctrl&#43;space开启/关闭输入法<br> 便装个别的输入法（比如微软拼音或者智能ABC）。 <br> 你会发现WINDOWS把默认的输入法热键又换回来了，还是ctrl&#43;space。<br> </p> <div> 作者：luguo0816 发表于2012/7/25 9:56:15 <a href="http://blog.csdn.net/luguo0816/article/details/7783373">原文链接</a> </div> <div> 阅读：961 评论：0 <a href="http://blog.csdn.net/luguo0816/article/details/7783373#comments" target="_blank">查看评论</a> </div> <![CDATA[[原]eclipse svn运用]]> http://blog.csdn.net/luguo0816/article/details/7692721 http://blog.csdn.net/luguo0816/article/details/7692721 luguo0816 2012/6/26 14:20:13 <p>eclipse3.6</p> <p>help-&gt;eclipse marketplace</p> <p>搜索subversive，安装。选项默认</p> <p><br> </p> <p>新建svn项目</p> <p>new-&gt;svn-&gt;从svn中检出项目(意思是用svn新建一个php项目)</p> <p>-&gt; 创建新的资源库位置-&gt;</p> <p><img src="" alt=""></p> <p>一路确定完后，</p> <p>选择新建一个项目，如php项目或java项目等等</p> <p><img src="" alt=""><br> </p> <p><img src="" alt=""><br> </p> <p>完成之后，</p> <p>左边的资源浏览器出现一个以code.google.com项目中的文件为该项目资源的项目</p> <div><img src="file:///C:\Documents and Settings\Microsoft\Application Data\Tencent\Users\344288862\QQ\WinTemp\RichOle\CV~IBRHJ@RFW2J95FY~Z@UB.jpg" alt=""></div> <img src="" alt=""><br> <p><img src="" alt=""></p> <p></p> <p><br> </p> <p>提交资源到code.google.com</p> <p>右键点击项目或文件选择team-&gt;提交</p> <p><br> </p> <div><img src="file:///C:\Documents and Settings\Microsoft\Application Data\Tencent\Users\344288862\QQ\WinTemp\RichOle\CV~IBRHJ@RFW2J95FY~Z@UB.jpg" alt=""></div> <br> <p></p> <div> 作者：luguo0816 发表于2012/6/26 14:20:13 <a href="http://blog.csdn.net/luguo0816/article/details/7692721">原文链接</a> </div> <div> 阅读：275 评论：0 <a href="http://blog.csdn.net/luguo0816/article/details/7692721#comments" target="_blank">查看评论</a> </div> <![CDATA[[原]ecplise for php(3.6)错误unsupported content type in editor]]> http://blog.csdn.net/luguo0816/article/details/7667297 http://blog.csdn.net/luguo0816/article/details/7667297 luguo0816 2012/6/15 17:58:30 <p>当重构-&gt;重命名时发生上面的错误时，解决方法：</p> <p>window-&gt;preferences-&gt;editors-&gt;file Associations-&gt;file types,添加*.php,然后点击它，接着在下面的associated editors中把php editor设为默认的编辑器，举一反三其他后缀也是这样解决</p> <div> 作者：luguo0816 发表于2012/6/15 17:58:30 <a href="http://blog.csdn.net/luguo0816/article/details/7667297">原文链接</a> </div> <div> 阅读：1419 评论：0 <a href="http://blog.csdn.net/luguo0816/article/details/7667297#comments" target="_blank">查看评论</a> </div> <![CDATA[[原]lamp编译安装(centos6.2+apache2.4.2+mysql5.5.24+php5.3.13)]]> http://blog.csdn.net/luguo0816/article/details/7649300 http://blog.csdn.net/luguo0816/article/details/7649300 luguo0816 2012/6/10 3:34:34 <p><a target="_blank" href="http://www.osyunwei.com/archives/2696.html">参考http://www.osyunwei.com/archives/2696.html</a></p> <p><br> </p> <p>先配置yum源<br> </p> <p>&nbsp;&nbsp;&nbsp; 安装优先级插件，yum install yum-plugin-priorities.noarch(noarch 平台无关意思，noarch即no architectures)</p> <p>&nbsp;&nbsp;&nbsp; 修改/ect/yum.repos.d/CentOS-Base.repo,[base] 、[updates]、[extras]添加priority=1;[centosplus]、[contrib]添加priority=2</p> <p>&nbsp;&nbsp;&nbsp; 系统保留1-10，第三方源用11-99，1为最高级</p> <p>&nbsp;&nbsp; 安装epel, rpm -ivh <a target="_blank" href="http://dl.fedoraproject.org/pub/epel/6/i386/epel-release-6-7.noarch.rpm"> http://dl.fedoraproject.org/pub/epel/6/i386/epel-release-6-7.noarch.rpm</a></p> <p>&nbsp;&nbsp;&nbsp; 导入key，rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</p> <p>&nbsp;&nbsp; vi /etc/yum.repos.d/epel.repo,[epel]下面增加priority=11</p> <p><br> </p> <p><br> </p> <p><br> </p> <p>一、配置好ip、DNS、网关，确保使用远程连接工具能够连接服务器</p> <p>&nbsp;&nbsp; centos设置ip地址、网关、DNS教程：<a target="_blank" href="http://www.osyunwei.com/archives/423.html">http://www.osyunwei.com/archives/423.html</a></p> <p>二、配置防火墙，开启80端口、3306端口</p> <p>&nbsp; vi /etc/sysconfig/iptables</p> <p>-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT（允许80端口通过防火墙）<br> -A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT（允许3306端口通过防火墙）<br> <span style="color:#ff00">特别提示：很多网友把这两条规则添加到防火墙配置的最后一行，导致防火墙启动失败，正确的应该是添加到默认的22端口这条规则的下面</span><br> 添加好之后防火墙规则如下所示：</p> <p>#########################################################<br> # Firewall configuration written by system-config-firewall<br> # Manual customization of this file is not recommended.<br> *filter<br> :INPUT ACCEPT [0:0]<br> :FORWARD ACCEPT [0:0]<br> :OUTPUT ACCEPT [0:0]<br> -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT<br> -A INPUT -p icmp -j ACCEPT<br> -A INPUT -i lo -j ACCEPT<br> -A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT<br> -A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT<br> -A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT<br> -A INPUT -j REJECT --reject-with icmp-host-prohibited<br> -A FORWARD -j REJECT --reject-with icmp-host-prohibited<br> COMMIT<br> #########################################################<br> /etc/init.d/iptables restart #最后重启防火墙使配置生效</p> <p><br> </p> <p>三、关闭SELINUX<br> &nbsp;&nbsp; vi /etc/selinux/config<br> &nbsp;&nbsp; #SELINUX=enforcing #注释掉<br> &nbsp;&nbsp; #SELINUXTYPE=targeted #注释掉<br> &nbsp;&nbsp; SELINUX=disabled #增加<br> &nbsp;&nbsp; :wq 保存，关闭<br> &nbsp;&nbsp; shutdown -r now #重启系统</p> <p>四 、系统约定<br> &nbsp;&nbsp; 软件源代码包存放位置：/usr/local/src<br> &nbsp;&nbsp; 源码包编译安装位置：/usr/local/软件名字<br> </p> <p>五、下载软件包</p> <p>&nbsp; 1、下载apache</p> <p>&nbsp;&nbsp;&nbsp; httpd-2.4.2.tar.bz2</p> <p>&nbsp; 2、下载MySQL<br> &nbsp;&nbsp;&nbsp;&nbsp; mysql-5.5.24.tar.gz<br> &nbsp;&nbsp; 3、下载php<br> &nbsp;&nbsp;&nbsp;&nbsp; php-5.3.13.tar.bz2<br> &nbsp;&nbsp; 4、下载cmake（MySQL编译工具）<br> &nbsp;&nbsp;&nbsp;&nbsp; http://www.cmake.org/files/v2.8/cmake-2.8.7.tar.gz<br> &nbsp;&nbsp; 5、下载libmcrypt（PHPlibmcrypt模块）<br> &nbsp;&nbsp;&nbsp;&nbsp; ftp://mcrypt.hellug.gr/pub/crypto/mcrypt/libmcrypt/libmcrypt-2.5.7.tar.gz<br> &nbsp;&nbsp; 6、下载apr（Apache库文件）<br> &nbsp;&nbsp;&nbsp; http://mirror.bit.edu.cn/apache/apr/apr-1.4.6.tar.gz (还要安装apr-devel)<br> &nbsp;&nbsp; 7、下载apr-util（Apache库文件）<br> &nbsp;&nbsp;&nbsp; http://mirror.bit.edu.cn/apache/apr/apr-util-1.4.1.tar.gz (还要安装apr-util-devel)<br> </p> <p><span style="color:#ff00">用WinSCP远程连接到服务器，把下载好的软件上传到服务器/usr/local/src下面</span><br> </p> <p>六、安装编译工具及库文件（使用CentOS yum命令安装）</p> <p>&nbsp; 在安装某个软件时先用rpm -qa | grep 软件名,看是否已经安装</p> <p>&nbsp;&nbsp; 可以用rpm -ivh 软件名 --test&nbsp; ,测试安装查看依赖关系<br> </p> <p>&nbsp;&nbsp;&nbsp; centos6.2已经安装了apache2.2.1,libxml,zlib,libpng, freetype, autoconf, <br> </p> <p>&nbsp;&nbsp; 有些还要安装它到开发包,如上面的libpng-devel,freetype-devel</p> <p>&nbsp;&nbsp;&nbsp; 可以用./configure --help | grep 选项，查看该选项配置方式</p> <p>&nbsp; <span style="color:#ff00">安装libmcrypt</span></p> <p>&nbsp;&nbsp; ./configure --prefix=/usr/local/libmcrypt/&nbsp;&nbsp; #加密解密库</p> <p>&nbsp; ./configure --enable-ltdl-install&nbsp;&nbsp;&nbsp; ## libltdl在libmcrypt包中(也可以用./configure --help | grep ltdl 查找该选项配置方式)</p> <p>&nbsp;&nbsp; <span style="color:#ff00">安装jpeg</span></p> <p>&nbsp;&nbsp;&nbsp;&nbsp; 先创建目录bin,lib,include,man/man1&nbsp; ，./configure --prefix=/usr/local/jpeg6/&nbsp; --enable-shared --enable-static<br> </p> <p>&nbsp;&nbsp; <span style="color:#ff00">安装gd</span></p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ./configure --prefix=/usr/local/gd2/ --with-jpeg=/usr/local/jpeg6/ <br> </p> <p>&nbsp;&nbsp;&nbsp; <span style="color:#ff00">安装apache</span></p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 安装apache前先安装apr和apr-util</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ./configure --prefix=/usr/local/apr</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ./configure&nbsp; --prefix=/usr/local/apr-util --with-apr=/usr/local/apr/bin/apr-1-config</p> <p>&nbsp;&nbsp;&nbsp;&nbsp; 接着cd /usr/local/src/</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mv apr httpd/srclib/apr</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mv&nbsp; apr-util&nbsp; httpd/srclib/apr-util</p> <p>&nbsp;&nbsp;&nbsp;&nbsp; ./configure --prefix=/usr/local/apache2/ --sysconfdir=/etc/httpd/&nbsp; --with-included-apr&nbsp; --disable-userdir&nbsp; --enable-so --enable-deflate-shared --enable-expires-shared --enable-rewrite-shared --enable-static-support</p> <p>&nbsp;&nbsp; /usr/local/apache2/bin/apachectl -k start&nbsp; #启动</p> <p>&nbsp; vi /etc/httpd/httpd.conf</p> <p>&nbsp;&nbsp;&nbsp;&nbsp; 修改： #ServerName 127.0.01:80</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DirectoryIndex index.html index.php</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Options FollowSymLinks&nbsp;&nbsp; #不显示目录结构</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AllowOverride All&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #开启apache支持伪静态，有三处都做修改</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LoadModule rewrite_module&nbsp; modules/mod_rewrite.so&nbsp; #取消前面的注释，开启apache支持伪静态</p> <p>&nbsp;&nbsp; vi /etc/profile&nbsp;&nbsp; #添加apache服务系统环境变量</p> <p>&nbsp;&nbsp;&nbsp;&nbsp; 在最后添加下面这一行</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; export PATH=$PATH:/usr/local/apache2/bin</p> <p><br> </p> <p>&nbsp;&nbsp;&nbsp; cp /usr/local/apache2/bin/apachectl /etc/rc.d/init.d/httpd&nbsp;&nbsp; #把apache加入到系统启动</p> <p>&nbsp;&nbsp; vi /etc/init.d/httpd&nbsp;&nbsp; #编辑文件</p> <p>&nbsp;&nbsp;&nbsp;&nbsp; 在#!/bin/sh下面添加一下两行</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #chkconfig:2345 10 90</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #description:Activates/Deactivates&nbsp; Apache Web Server</p> <p>&nbsp;&nbsp;&nbsp; chown 用户组.用户名 -R /usr/local/apache2/htdocs&nbsp;&nbsp; #更改目录所有组</p> <p>&nbsp;&nbsp;&nbsp; chmod 700 /usr/local/apache2/htdocs&nbsp; -R&nbsp; #更改apache网站目录权限</p> <p>&nbsp;&nbsp; chkconfig httpd on&nbsp;&nbsp; #设置开启启动</p> <p>&nbsp;&nbsp; /etc/init.d/httpd start</p> <p>&nbsp;&nbsp; service httpd restart</p> <p><br> </p> <p><span style="color:#ff00">&nbsp; 安装mysql</span></p> <p>&nbsp;&nbsp;&nbsp; 安装mysql前先安装ncurses ,系统本身安装了ncurses,但还有装ncurses-devel<br> </p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groupadd mysql&nbsp; #添加mysql组</p> <p>&nbsp;&nbsp;&nbsp; useradd -g mysql mysql -s /bin/false #创建用户mysql并加入到mysql组，不允许mysql用户直接登录系统(/bin/false)</p> <p>&nbsp;&nbsp;&nbsp; mkdir -p&nbsp; /data/mysql/&nbsp;&nbsp; #创建mysql数据库存放目录</p> <p>&nbsp;&nbsp;&nbsp; chown -R mysql:mysql /data/mysql #设置mysql数据目录权限</p> <p>&nbsp;&nbsp;&nbsp;&nbsp; cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/data/mysql -DSYSCONFDIR=/etc/&nbsp; #配置</p> <p>&nbsp;&nbsp;&nbsp;&nbsp; cd /usr/local/mysql</p> <p>&nbsp;&nbsp;&nbsp; cp ./support-files/my-huge.cnf&nbsp; /etc/my.cnf&nbsp; #拷贝配置文件(注意：/etc目录下面默认有一个my.cnf，直接覆盖即可)</p> <p>&nbsp;&nbsp;&nbsp; vi /etc/my.cnf&nbsp; #编辑配置文件，在[mysqld]部分增加下面一行</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; datadir=/data/mysql&nbsp;&nbsp; #添加mysql数据库路径</p> <p>&nbsp;&nbsp; ./scripts/mysql_install_db --user=mysql&nbsp; #生成mysql系统数据库</p> <p>&nbsp; &nbsp; cp ./support-files/mysql.server /etc/rc.d/init.d/mysqld &nbsp; #把mysql加入系统启动</p> <p>&nbsp;&nbsp; chmod 755&nbsp; /etc/init.d/mysqld</p> <p>&nbsp; &nbsp; chkconfig &nbsp; mysqld on</p> <p>&nbsp; &nbsp; vi /etc/rc.d/init.d/mysqld</p> <p>&nbsp; &nbsp; basedir=/usr/local/mysql</p> <p>&nbsp;&nbsp; datadir=/data/mysql</p> <p>&nbsp;&nbsp; service mysqld start</p> <p>&nbsp;&nbsp; vi&nbsp; /etc/profile &nbsp;&nbsp; #把mysql服务加入系统环境变量：在最后添加下面这一行</p> <p>&nbsp; &nbsp; &nbsp; export PATH=$PATH:/usr/local/mysql/bin</p> <p>&nbsp;&nbsp; mysql_secure_installation &nbsp; # 设置mysql密码</p> <p>&nbsp; &nbsp; 或者直接修改密码/usr/local/mysql/bin/mysqladmin -u root -p password &quot;123456&quot; #修改密码&nbsp;&nbsp;</p> <p>&nbsp;&nbsp; service mysqld restart</p> <p><br> </p> <p><br> </p> <p>&nbsp;&nbsp;&nbsp;<span style="color:#ff00"> 安装php</span></p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ./configure --prefix=/usr/local/php/ --with-config-file-path=/usr/local/php/etc/ --with-apxs2=/usr/local/apache2/bin/apxs --with-mysql=/usr/local/mysql --with-mysqli=/usr/local/mysql/bin/mysql_config --with-mysql-sock=/tmp/mysql.sock --with-gd=/usr/local/gd2/ --with-iconv --with-jpeg-dir=/usr/local/jpeg6/ --with-zlib --enable-xml --enable-safe-mode --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curlwrappers --enable-mbstring=all --enable-ftp --enable-gd-native-ttf --with-openssl --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --without-pear --with-gettext --enable-session --with-mcrypt=/usr/local/libmcrypt/</p> <p><br> </p> <p><span style="color:#ff00">注意这里容易出现 make: *** [ext/phar/phar.php] 错误 127</span><br> &nbsp;&nbsp;&nbsp; ln -s /usr/local/mysql/lib/libmysqlclient.so.18 /usr/lib/<br> &nbsp;&nbsp; 或<br> &nbsp; &nbsp; ln -s /usr/local/mysql/lib/libmysqlclient.so /usr/lib/<br> &nbsp;&nbsp;&nbsp; ln -s /usr/local/mysql/lib/libmysqlclient.so.18 /usr/lib/libmysqlclient.so.18<br> <br> <span style="color:#ff00">apache libltdl.so.3:cannot open shared object file:No such file or directory异常</span><br> &nbsp;&nbsp; ln -s /usr/local/lib/libltdl.so.3 /usr/lib/libltdl.so.3<br> <br> <span style="color:#ff00">make: [ext/phar/phar.phar] 错误 1 (忽略)</span><br> &nbsp;&nbsp; 解决方法在编译的时候加--without-pear参数<br> </p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br> </p> <p><br> </p> <div> 作者：luguo0816 发表于2012/6/10 3:34:34 <a href="http://blog.csdn.net/luguo0816/article/details/7649300">原文链接</a> </div> <div> 阅读：1552 评论：0 <a href="http://blog.csdn.net/luguo0816/article/details/7649300#comments" target="_blank">查看评论</a> </div> <![CDATA[[转]linux   .d 的意思]]> http://blog.csdn.net/luguo0816/article/details/7647991 http://blog.csdn.net/luguo0816/article/details/7647991 luguo0816 2012/6/9 13:14:43 <p><a href="http://tieba.baidu.com/p/1301943145">http://tieba.baidu.com/p/1301943145</a><br> </p> <p>这个 &quot;.d&quot; 是表示目录(directory)的意思</p> <br> 早期 unix 中很多应用软件通常都只用一个独立的配置文件，如 fstab 等。随着应用越来越复杂，软件中需要配置的项目越来越多，单个配置文件开始显得复杂无比，难以操作。这时很多软件就逐渐开始将配置项放入多个文件。使用多个配置文件更容易分配操作权限，内容也可以更专一，因此更适合模块化管理。但这也造成了 /etc/ 目录下的文件急剧增加，且文件名冲突现象越来越严重。<br> <br> 因此unix 中约定系统软件除创建一个(特例下可以多个，如 rc 簇)传统的全局配置文件外，将附属的其它配置文件保存到同名的目录中，区别是在名称后面加 &quot;.d&quot; 后缀，同时全局配置文件后面也加上后缀 &quot;.conf&quot;，这样就使得配置文件更容易进行模块化管理，同时兼容了 unix 的老习惯：直接操作 /etc/ 下的配置文件，而不是操作 /etc/ 下子目录中的配置文件。<br> <br> 对于安装在 unix 中的应用软件来说，它们的配置文件除自己使用外，很少会由其它应用来读取或修改，因此应用软件完全可以由自己来管理配置文件，所以应用类软件通常直接在 /etc/ 下创建一个子目录用来保存所有的配置文件，而不再创建传统的全局配置文件。<br> <br> 所以，我们现在能在 /etc/ 看到的就是这三种不同的配置文件组织方式下的文件和子目录。分别是：传统的单一配置文件(都是比较早期开发的软件)、系统软件的全局配置文件(.conf) &#43; 附属配置文件(.d)、以及应用软件的配置文件（存放在子目录且子目录名不加 &quot;.d&quot;）。<br> <br> 另外，unix 中还有一个约定，凡是守护进程的执行文件名后会加上 &quot;d&quot; ，这个 &quot;d&quot; 前不带 &quot;.&quot; 号，代表的才是 daemon 的意思，通常存放在 /usr/sbin/ 下。<br> <div> 作者：luguo0816 发表于2012/6/9 13:14:43 <a href="http://blog.csdn.net/luguo0816/article/details/7647991">原文链接</a> </div> <div> 阅读：1286 评论：0 <a href="http://blog.csdn.net/luguo0816/article/details/7647991#comments" target="_blank">查看评论</a> </div> <![CDATA[[原]eclipse错误 -- Unsupported content type in editor.]]> http://blog.csdn.net/luguo0816/article/details/7599373 http://blog.csdn.net/luguo0816/article/details/7599373 luguo0816 2012/5/24 17:41:43 <p>Unsupported content type in editor. To associate a file extension with a supported content type, please see the Content Types Preferences Page.</p> <p>意思找不到关联文本编辑器编辑该文件</p> <p>解决方法</p> <p>window &gt; preference &gt; general &gt;Editors-&gt;File Associations</p> <p>在File types右边点击add,添加一个关联类型,如*.php<br> <br> </p> <div> 作者：luguo0816 发表于2012/5/24 17:41:43 <a href="http://blog.csdn.net/luguo0816/article/details/7599373">原文链接</a> </div> <div> 阅读：5933 评论：1 <a href="http://blog.csdn.net/luguo0816/article/details/7599373#comments" target="_blank">查看评论</a> </div> <![CDATA[[转]manual]]> http://blog.csdn.net/luguo0816/article/details/7552035 http://blog.csdn.net/luguo0816/article/details/7552035 luguo0816 2012/5/9 22:58:57 <a target="_blank" href="http://www.phptogether.com/">http://www.phptogether.com/</a><br> <div> 作者：luguo0816 发表于2012/5/9 22:58:57 <a href="http://blog.csdn.net/luguo0816/article/details/7552035">原文链接</a> </div> <div> 阅读：216 评论：0 <a href="http://blog.csdn.net/luguo0816/article/details/7552035#comments" target="_blank">查看评论</a> </div> <![CDATA[[转]如何在15分钟内掌握JavaScript面向对象编程]]> http://blog.csdn.net/luguo0816/article/details/7551282 http://blog.csdn.net/luguo0816/article/details/7551282 luguo0816 2012/5/9 19:21:41 <p><a target="_blank" href="http://www.php100.com/html/webkaifa/javascript/2012/0508/10373.html">http://www.php100.com/html/webkaifa/javascript/2012/0508/10373.html</a></p> <p><a target="_blank" href="http://www.php100.com/html/webkaifa/javascript/2012/0508/10373.html"><br> </a></p> <p>导读：经常看到一些JavaScript的代码脏乱得无法理解，到处都是属性和方法，或者一个循环套着一个循环。但如果使用面向对象就能很好的理清代码，并方便理解和修改代码。如果你不希望自己的代码只有上帝理解的话，就请尽量考虑使用面向对象的模式。</p> <br> 　　译文正文：<br> <br> 　　到处都是属性、方法，代码极其难懂，天哪，我的程序员，你究竟在做什么?仔细看看这篇指南，让我们一起写出优雅的面向对象的JavaScript代码吧!<br> <br> 　　作为一个开发者，能否写出优雅的代码对于你的职业生涯至关重要。随着像Node.js这类技术的发展，你甚至可以在服务器端使用JavaScript了。同样的，你也可以使用JavaScript来控制MongoDB的持续数据存储。<br> <br> 　　文本标记<br> <br> 　　文本标记只是JavaScript里创建对象的一种方法，当然这里肯定不止这一种，但它是你在只打算创建一个对象实例时的首选方法。<br> <br> <br> <br> 　　var bill = {};<br> <br> 　　上面的代码并不实用，它只是一个空对象。接下来我们动态地向这个对象中添加一些属性和方法。<br> <br> <br> <br> 　　bill.name = &quot;Bill E Goat&quot;;<br> <br> 　　bill.sound = function() {<br> <br> 　　console.log( 'bahhh!' );<br> <br> 　　};<br> <br> <br> <br> 　　这里添加了属性name，并且给它分配了&#20540;&quot;Bill E Goat&quot;。我们并不需要先创建一个空对象，而可以把所有代码直接写在一对括号里。<br> <br> <br> <br> 　　var bill = {<br> <br> 　　name: &quot;Bill E Goat&quot;,<br> <br> 　　sound: function() {<br> <br> 　　console.log( 'bahhh!' );<br> <br> 　　}<br> <br> 　　};<br> <br> <br> <br> 　　是不是很美观?访问它的属性和方法就像呼吸一样简单、自然。<br> <br> <br> <br> 　　bill.name; // &quot;Bill E Goat&quot;<br> <br> 　　bill.sound(); // &quot;bahhh&quot;<br> <br> <br> <br> 　　如果属性名不是一个合法的标志符，我们还可以这样访问它：<br> <br> 　　bill['name']; // &quot;Bill E Goat&quot;<br> <br> 　　注意：我在调用方法时在其后添加了圆括号。现在，我们再重写一下当前的sound方法，并添加一个参数。<br> <br> <br> <br> <br> <br> 　　bill.sound = function(noise) {<br> <br> 　　console.log(noise);<br> <br> 　　};<br> <br> 　　bill.sound(&quot;brrr!&quot;); // &quot;brrr!&quot; He's cold :)<br> <br> <br> <br> 　　很好，我们已经传入参数了，并且在方法定义中访问了它。接下来，向对象中增加一个新方法来访问name属性。<br> <br> <br> <br> 　　bill.sayName = function() {<br> <br> 　　console.log( &quot;Hello &quot; &#43; this.name );<br> <br> 　　};<br> <br> 　　bill.sayName(); // &quot;Hello Bill E Goat&quot;<br> <br> <br> <br> 　　我们可以使用this.propertyName(在本例中即this.name)在方法内访问属性。<br> <br> 　　bill.sayName; // function<br> <br> 　　怎么回事?访问sayName方法返回了一个方法定义。现在让我们再深入些。<br> <br> <br> <br> 　　var sound = bill.sound;<br> <br> 　　sound('moo!'); // &quot;moo!&quot;<br> <br> <br> <br> 　　现在我们指定了sound方法为一个局部函数，可以调用这个函数并且传递参数。你认为在复制bill的时候会发生什么?(类比下克隆羊Dolly)<br> <br> <br> <br> 　　var sally = bill;<br> <br> 　　sally.name; // &quot;Bill E Goat&quot;，可它的名字是Sally<br> <br> 　　sally.name = &quot;Sally&quot;;<br> <br> 　　sally.name; // &quot;Sally&quot;，好些了<br> <br> 　　bill.name; // &quot;Sally&quot;，问题又转移到bill身上了<br> <br> <br> <br> 　　上面的例子中我们新建了一个变量sally，并使它和bill相同，所以bill和sally会在内存中引用了同一个对象。这时候给改变一块它们就会同时发生改变。再看看下面这段代码：<br> <br> <br> <br> 　　bill.name = &quot;Bill E Goat&quot;;<br> <br> 　　bill.sayName(); // &quot;Hello Bill E Goat&quot;;<br> <br> 　　var sayName = bill.sayName;<br> <br> 　　sayName; // function 目前为止一切顺利<br> <br> 　　sayName(); // &quot;Hello &quot;，为什么这里又不再显示bill的名字了?<br> <br> <br> <br> 　　bill的name是一个本地实例变量，只对bill可得。当sayName方法被创建为全局变量时，当它碰到this.name声明时，它会在全局查找name的&#20540;。唯一的问题在于name还没有被定义。现在让我们在全局定义name，看看会发生什么：<br> <br> <br> <br> 　　var name = &quot;Bearded Octo&quot;;<br> <br> 　　sayName(); // &quot;Hello Bearded Octo&quot;<br> <br> <br> <br> 　　这里我们在全局范围内定义了name变量，并且赋予了&#20540;&quot;Bearded Octo&quot;。当我们在调用sayHello方法时它会在全局范围内查找name变量，最终会获得&#20540;&quot;Bearded Octo&quot;。我们为什么不为这几个对象建立一个共同的“类”呢?<br> <br> 　　构造函数<br> <br> 　　构造函数是另一个编写面向对象JavaScript代码的方法，当你需要初始化对象的属性、方法，或者需要创建多个属性、方法各不相同的实例时，它将是你最佳的选择。同样我们先从创建一个空对象开始：<br> <br> <br> <br> 　　function Game() {};<br> <br> 　　这个对象包括自己的属性，你甚至可以在创建对象时传入属性，然后再对其进行修改。<br> <br> <br> <br> 　　var zelda = new Game();<br> <br> 　　var smb = new Game();<br> <br> 　　zelda.title = &quot;Legend of Zelda&quot;;<br> <br> 　　smb.title = &quot;Super Mario Brothers&quot;;<br> <br> 　　zelda.title; // &quot;Legend of Zelda&quot;<br> <br> 　　smb.title; // &quot;Super Mario Brothers&quot;<br> <br> <br> <br> 　　现在这个对象已经有自己的方法了!新创建对象时我们甚至可以传递属性，之后再修改。<br> <br> <br> <br> 　　function Game(title) {<br> <br> 　　this.title = typeof title !== 'undefined' ? title : &quot;&quot;;<br> <br> 　　};<br> <br> 　　var zelda = new Game(&quot;Legend of Zelda&quot;);<br> <br> 　　zelda.title; // &quot;Legend of Zelda&quot;<br> <br> 　　zelda.title = &quot;Ocarina of Time&quot;;<br> <br> 　　zelda.title; // &quot;Ocarina of Time&quot;<br> <br> 　　var blank = new Game();<br> <br> 　　blank.title; // &quot;&quot;<br> <br> <br> <br> 　　也许你没看明白第二行的内容，其实是使用了三元操作来避免单行的if else，它和下面标准的if else语句是一个意思。<br> <br> <br> <br> 　　if (typeof title !== 'undefined') {<br> <br> 　　this.title = title;<br> <br> 　　} else {<br> <br> 　　this.title = &quot;&quot;;<br> <br> 　　}<br> <br> 　　// Is the same as<br> <br> 　　this.title = typeof title !== 'undefined' ? title : &quot;&quot;;<br> <br> <br> <br> 　　如果title变量在对象被创建时传入，title实例变量将会指定为title的&#20540;。如果没有&#20540;传入，那么title将会被初始化为默认&#20540;&quot;&quot;。我们同样可以创建一个方法来访问这个属性：<br> <br> <br> <br> 　　zelda.loveTitle = function() {<br> <br> 　　console.log( &quot;I love &quot; &#43; this.title );<br> <br> 　　};<br> <br> 　　zelda.loveTitle(); // &quot;I love Ocarina of Time&quot;<br> <br> <br> <br> 　　这样就很整洁了，但是我们还能做得更好。我们可以在Game类中添加一个方法，这样所有Game类的实例将都能使用此方法。<br> <br> <br> <br> 　　Game.prototype.heartIt = function() {<br> <br> 　　console.log( &quot;I heart &quot; &#43; this.title );<br> <br> 　　};<br> <br> 　　zelda.heartIt(); // &quot;I heart Ocarina of Time&quot;<br> <br> 　　smb.heartIt(); // &quot;I heart Super Mario Brothers&quot;<br> <div> 作者：luguo0816 发表于2012/5/9 19:21:41 <a href="http://blog.csdn.net/luguo0816/article/details/7551282">原文链接</a> </div> <div> 阅读：189 评论：0 <a href="http://blog.csdn.net/luguo0816/article/details/7551282#comments" target="_blank">查看评论</a> </div> <![CDATA[[转]PHP file_exists有多'坑人']]> http://blog.csdn.net/luguo0816/article/details/7551180 http://blog.csdn.net/luguo0816/article/details/7551180 luguo0816 2012/5/9 18:43:38 <p><a target="_blank" href="http://www.php100.com/html/webkaifa/PHP/PHPyingyong/2012/0509/10377.html">http://www.php100.com/html/webkaifa/PHP/PHPyingyong/2012/0509/10377.html</a></p> <p><br> </p> <p>　我发现了一个问题，今天与大家分享。我把整个过程描述一下。<br> <br> 　　问题<br> <br> 　　公司有个框架是基于smarty写的，我负责php的升级，维护人员把新环境布上来之后，测试人员找我提出经常报错(错误:提示找不到文件的)。我追踪了一下代码，原来是smarty的这个地方报的错误。<br> \<br> <br> 　　错误：这里报出文件不存在。<br> <br> 　　思考过程：<br> <br> 　　1、我原以为是程序里没有这个文件呢，结果发现，文件是有的，那是怎么回事?<br> <br> 　　2、后来我再猜是不是php内核有问题，我把php的相关内核文件看了一遍，也没发现问题。结果我就把整个过程跟项目经理说去了。——事情也没解决，就这样先不了了之。升级的事情先耽误着。<br> <br> 　　今天又发现这个问题，我第一反应是php版本是不是升级了，发现没有。——后来把整个目录设置成777就没事了(chmod 777 -R 目录)。我想是不是file_exists()方法问题。<br> <br> 　　所以，我就进行了相关的调试和实验。<br> \<br> <br> 　　调试过程<br> <br> 　　调试代码：<br> \<br> <br> 　　目录：<br> \<br> <br> 　　观察各个权限：test对www是没有任何权限的，而执行文件index.php有读写执行权限，包含文件test.txt有读写权限。<br> \<br> <br> 　　运行结果：<br> \<br> <br> <br> <br> 　　<br> \<br> <br> 　　目录的执行权限影响file_exists()<br> <br> 　　1、给test一个最大的权限——755<br> \<br> \<br> \<br> <br> 　　既然成功了，说明file_exists()函数是受目录权限的限制的。<br> <br> 　　那什么样的目录权限影响file_exists()呢?<br> <br> 　　我做了几个实验：<br> <br> 　　1、文件的任何上级目录，只有写权限时报文件不存在;<br> <br> 　　2、文件的任何上级目录，只有读权限时也报文件不存在;<br> <br> 　　3、而当所有上级目录都有执行权限的时候，报文件是存在的，一切都正常。<br> <br> 　　结果，说明file_exists()在判断文件是否存在的时候是递归判断每个目录是不是有执行权限。<br> <br> 　　修改文件路径为相对路径，得出一样的结果。<br> \<br> \<br> <br> 　　总结<br> <br> 　　在php手册上并没有提到，file_exists会受目录的执行权限影响。今通过此文告知那些也有这方面问题的开发者。仅以此为戒。<br> <br> 　　附加信息<br> <br> 　　感谢大家留的言，非常有用。经过大家的意见我再查了下手册，确实，如果目录没有执行权限，php-fpm应用进程就不能到这个目录下面去进行文件搜索，当然就认为文件不存在(实际是认为没有可执行的目录是不存在的)。<br> <br> 　　手册内容，大家可以一起斟酌一下，主要是执行权限。在这里就不详谈读写权限了(一般都很好理解)。<br> \<br> <br> 　　明显手册中，对目录的执行权限有明确的指示。对目录的执行权限，就是拥有被搜索的权利。<br> \<br> <br> 　　原文链接：http://www.cnblogs.com/baochuan/archive/2012/05/06/2445822.html<br> <a target="_blank" href="http://www.php100.com/html/webkaifa/PHP/PHPyingyong/2012/0509/10377.html"></a></p> <br> <div> 作者：luguo0816 发表于2012/5/9 18:43:38 <a href="http://blog.csdn.net/luguo0816/article/details/7551180">原文链接</a> </div> <div> 阅读：1886 评论：0 <a href="http://blog.csdn.net/luguo0816/article/details/7551180#comments" target="_blank">查看评论</a> </div> <![CDATA[[转]用PHP开发桌面应用]]> http://blog.csdn.net/luguo0816/article/details/7551168 http://blog.csdn.net/luguo0816/article/details/7551168 luguo0816 2012/5/9 18:41:28 <p><a target="_blank" href="http://www.php100.com/html/webkaifa/PHP/PHPyingyong/2012/0503/10349.html">http://www.php100.com/html/webkaifa/PHP/PHPyingyong/2012/0503/10349.html</a></p> <p><br> </p> <p><br> </p> <p>众所周知，PHP是一个用来开发B/S项目的利器!今天我们来给大家介绍一个PHP的扩展，它能使PHP像其他C/S编程语言一样开发桌面的应用……它就是---WinBinder<br> <br> 　　什么是WinBinder?<br> <br> 　　WinBinder是一个PHP的开源扩展，它可让PHP程序员轻松的构建原生Windows应用程序。<br> <br> 　　WinBinder的特点<br> <br> 　　它封装了大部分的Windows API，使PHP在Windows下开发从而变得很容易。<br> <br> 　　让你像使用VB一样，可视化的对软件界面进行拖动布局<br> <br> 　　自动生成Windows API接口，没有多余的冗余库，而且无需安装<br> <br> 　　可使用现有的PHP函数和其他扩展，包括数据库、图形处理、网络数据功能(XML、PDF……)拥有更广泛的扩展范围。<br> <br> <br> <br> 　　WinBinder界面<br> <br> 　　<br> <br> 　　下载WinBinder<br> <br> 　　http://winbinder.org/download.php<br> <br> 　　WinBinder手册<br> <br> 　　http://winbinder.org/manual.php<br> <br> <a target="_blank" href="http://www.php100.com/html/webkaifa/PHP/PHPyingyong/2012/0503/10349.html"></a></p> <br> <div> 作者：luguo0816 发表于2012/5/9 18:41:28 <a href="http://blog.csdn.net/luguo0816/article/details/7551168">原文链接</a> </div> <div> 阅读：309 评论：0 <a href="http://blog.csdn.net/luguo0816/article/details/7551168#comments" target="_blank">查看评论</a> </div> <![CDATA[[转]在CentOS 5.5系统中安装VMware Tools]]> http://blog.csdn.net/luguo0816/article/details/7540864 http://blog.csdn.net/luguo0816/article/details/7540864 luguo0816 2012/5/7 0:51:57 <p><a target="_blank" href="http://apps.hi.baidu.com/share/detail/16864522">http://apps.hi.baidu.com/share/detail/16864522</a></p> <p><br> </p> <p>在VMware中安装了CentOS 5.5，可是屏幕分辨率只能设置为800X600，在网上搜了解决方法，需要安装VMware Tools，安装的过程中，遇到的问题及其解决的方法，记录如下：<br> 一、VMware Tools在哪里？<br> 先启动CentOS系统，进入到系统后，在VMware Workstation的主菜单，<br> <br> 选择VM，Install VMware Tools，在弹出的对话框中选择install<br> <br> 如果不先启动CentOS系统，Install VMware Tools菜单是灰色的哦。<br> 二、如何安装VMware Tools ?<br> 双击计算机，双击打开CD-ROM驱动器。<br> <br> 将VMware Tools-5.5.3-34685.tar.gz拷贝到桌面。打开终端<br> [root@localhost ~]#cd Desktop<br> [root@localhost Desktop]# tar zxvf VMwareTools-5.5.3-34685.tar.gz<br> [root@localhost Desktop]#cd vmware-tools-distrib<br> [root@localhost vmware-tools-distrib]#./vmware-install.pl<br> 开始安装VMware Tools，一路回车往下走。<br> 配置X windows，输入yes并回车：<br> Do you want to change your guest X resolution?(yes/no) [no] yes<br> 选择显示屏幕大小，好了，重新启动！<br> ------------------------------------------------------------<br> 三、遇到的3个问题<br> 问题1：What is the location of the &quot;gcc&quot; program on your machine?<br> The answer &quot;&quot; is invalid. It must be the complete name of a binary file.<br> 回车，屏幕一直打印该信息，原因是我装系统的时候没安装开发工具。<br> 解决方法：在VMware中插入CentOS的DVD映像，在CentOS系统中点击“应用程序”，添加/删除软件，将“开发”-&gt;“开发工具”选中，应用。<br> 问题2：What is the location of the directory of C header files that match your running kernel? [/usr/src/linux/include]<br> 解决方法：升级 gcc &amp; kernel，使用如下的两个命令<br> yum -y install gcc gcc-c&#43;&#43; kernel-devel<br> yum -y update kernel<br> <br> [root@localhost vmware-tools-distrib]# yum -y install gcc gcc-c&#43;&#43; kernel-devel<br> Loaded plugins: fastestmirror<br> Loading mirror speeds from cached hostfile<br> * addons: centos.candishosting.com.cn<br> * base: centos.mirror.cdnetworks.com<br> * extras: centos.candishosting.com.cn<br> * updates: centos.ustc.edu.cn<br> Setting up Install Process<br> Package gcc-4.1.2-48.el5.i386 already installed and latest version<br> Package gcc-c&#43;&#43;-4.1.2-48.el5.i386 already installed and latest version<br> Package kernel-devel-2.6.18-194.11.1.el5.i686 already installed and latest version<br> Nothing to do<br> 不需要更新！<br> [root@localhost vmware-tools-distrib]# yum -y update kernel<br> Loaded plugins: fastestmirror<br> Loading mirror speeds from cached hostfile<br> * addons: centos.candishosting.com.cn<br> * base: centos.mirror.cdnetworks.com<br> * extras: centos.candishosting.com.cn<br> * updates: centos.ustc.edu.cn<br> Setting up Update Process<br> Resolving Dependencies<br> --&gt; Running transaction check<br> ---&gt; Package kernel.i686 0:2.6.18-194.11.1.el5 set to be installed<br> --&gt; Finished Dependency Resolution<br> Dependencies Resolved<br> ================================================<br> Package Arch Version Repository Size<br> ================================================<br> Installing:<br> Kernel i686 2.6.18-194.11.1.el5 updates 17 M<br> Transaction Summary<br> ================================================<br> Install 1 Package(s)<br> Upgrade 0 Package(s)<br> Total download size: 17 M<br> Downloading Packages:<br> kernel-2.6.18-194.11.1.el5.i686.rpm | 17 MB 01:19 <br> Running rpm_check_debug<br> Running Transaction Test<br> Finished Transaction Test<br> Transaction Test Succeeded<br> Running Transaction<br> Installing : kernel 1/1<br> Installed:<br> kernel.i686 0:2.6.18-194.11.1.el5 <br> Complete!<br> 完成更新！<br> 重启系统，重新运行vmware-install.pl<br> [root@localhost vmware-tools-distrib]#./vmware-install.pl<br> <br> 问题3：系统无法进入X Window<br> Undefined Monitor &quot;vmware&quot; referenced by Screen &quot;Screen0&quot;.<br> 原因:The OS configuration routine could not autodetect the monitor type and wrote a xorg.conf stub with no useful monitor data. The vmware-config-tools script then got confused and mixed monitor data with driver data, ruining the whole setup.<br> 解决方法：依次打开，系统-&gt;管理-&gt;显示，打开“显示设置”窗口。<br> <br> 有两个地方需要设置：<br> （1）点击“硬件”选项卡，点击“配置按钮”，将“显示器类型”调整为LCD Display下的相应选项；<br> （2）点击“设置”选项卡，选择需要设置的分辨率，点“确定”保存修改。<br> 重启系统，大功告成！<br> <br> <a target="_blank" href="http://apps.hi.baidu.com/share/detail/16864522"></a></p> <br> <div> 作者：luguo0816 发表于2012/5/7 0:51:57 <a href="http://blog.csdn.net/luguo0816/article/details/7540864">原文链接</a> </div> <div> 阅读：423 评论：0 <a href="http://blog.csdn.net/luguo0816/article/details/7540864#comments" target="_blank">查看评论</a> </div> <![CDATA[[原]account]]> http://blog.csdn.net/luguo0816/article/details/7516281 http://blog.csdn.net/luguo0816/article/details/7516281 luguo0816 2012/4/26 23:19:02 <p><br> </p> <p>car 1000</p> <p><br> </p> <p><br> </p> <p>2012/2</p> <p>brother<br> </p> <p>100</p> <p>parent</p> <p>400</p> <p><br> </p> <p>2012/4/26</p> <p>parent</p> <p>500<br> </p> <div> 作者：luguo0816 发表于2012/4/26 23:19:02 <a href="http://blog.csdn.net/luguo0816/article/details/7516281">原文链接</a> </div> <div> 阅读：117 评论：0 <a href="http://blog.csdn.net/luguo0816/article/details/7516281#comments" target="_blank">查看评论</a> </div> <![CDATA[[转]Linux目录架构详解]]> http://blog.csdn.net/luguo0816/article/details/7487297 http://blog.csdn.net/luguo0816/article/details/7487297 luguo0816 2012/4/22 19:37:18 Linux目录架构详解<br> <br> Linux和Windows操作系统的显著区别之一就是目录架构的不同。Linux操作系统的目录架构遵循文件系统层级结构标准。不知你是否使用ls命令浏览过Linux的根目录“/”，亲爱的读者，您都了解这些目录的含义吗？<br> <br> <br> <br> <p>ls -l / 遍历文件系统</p> <p><img src="http://articles.csdn.net/uploads/allimg/120420/120_120420170851_1.png" alt=""><br> </p> <br> 本文将引领您浏览Linux的目录架构，并解释每个重要目录的含义。<br> <br> / - Root<br> 通常称为根分区。所有的文件和目录皆由此开始。只有root用户对此目录拥有写权限。<br> <br> /bin - 用户可执行文件<br> 此目录包含二进制可执行文件。在单用户模式下Linux使用此目录的命令。此目录包含所有用户的常用命令，如ls、ping、cp等。<br> <br> /sbin - 系统可执行文件<br> 此目录中的命令主要供系统管理员使用，以进行系统维护。例如，iptables、reboot、fdisk等。<br> <br> /etc - 配置文件<br> 包含所有应用程序的配置文件，也包含启动、关闭某个特定程序的脚本，例如，/etc/resolv.conf、/etc/logrotate.conf等。<br> <br> /dev - 设备文件<br> 包含设备文件。在Linux中，一切都被看做文件。终端设备、USB、磁盘等等都被看做文件，如/dev/usbmon0。<br> <br> /proc - 进程信息<br> 所有系统进程的信息都包含在/proc目录中。/proc目录并不是一个真正的文件系统，而是包含了运行中的进程信息。例如，/proc目录包含了进程信息。/proc目录也包含了系统资源信息，如/proc/uptime包含了最近一次启动至今的正常运行时间，/proc/cpuinfo包含了处理器信息等。<br> <br> /var - 变量文件<br> /var是一个可增长的目录，包含变量文件。例如，/var/log（系统日志）、/var/lib （包文件） 、/var/mail（邮件）、/var/spool （打印队列）。<br> <br> /usr - 用户程序<br> 为用户应用程序存放可执行文件、源代码和文档。/usr/bin包含了用户可执行文件，如at、awk、cc等。/usr/sbin包含了系统管理员可执行文件，如cron、sshd、useradd等。/usr/local包含了用户编译源代码安装的应用程序，如/usr/local/apache2。<br> <br> /home - 用户主目录<br> 存放用户的私人文件。<br> <br> /boot - 启动加载文件<br> Linux系统启动时需要加载的文件。Kernel initrd、grub等文件都存放在此。<br> <br> /lib - 系统库文件<br> /bin和/sbin中的可执行文件需要/lib中库文件的支持。库文件通常以“ld”或“ld*.so”的形式命名，如ld-2.11.1.so。<br> <br> /opt - 可选应用<br> /opt用于安装独立软件商的可选应用。<br> <br> /mnt - 挂载目录<br> 挂载点，系统管理员可用于临时挂载文件系统。<br> <br> /media - 可移动媒体设备<br> 挂载可移动媒体设备，如/media/cdrom、/media/floppy等。<br> <br> /srv - 服务数据<br> Srv表示服务，用于服务器的所有服务数据存储在此目录中。（张志平/编译） <div> 作者：luguo0816 发表于2012/4/22 19:37:18 <a href="http://blog.csdn.net/luguo0816/article/details/7487297">原文链接</a> </div> <div> 阅读：169 评论：0 <a href="http://blog.csdn.net/luguo0816/article/details/7487297#comments" target="_blank">查看评论</a> </div> <![CDATA[[转]php 父类与子类相互访问]]> http://blog.csdn.net/luguo0816/article/details/7356437 http://blog.csdn.net/luguo0816/article/details/7356437 luguo0816 2012/3/15 12:12:21 <p>《大道PHP：LAMP.Zend.开源框架整合开发与实战》page141</p> <p><br> </p> <p>类成员访问控制</p> <p>&nbsp; 1、由public所定义的类成员可以在任何地方访问。</p> <p>&nbsp; 2、由protected 所定义的类成员可以被其所在类的子类和父类访问。</p> <p>&nbsp; 3、由private定义的类成员只能被其所在类访问。<br> </p> <p><br> </p> <p>便签</p> <p>&nbsp; 上面的第二条的意思即，父类可以访问子类的方法和属性，子类也可以访问父类的方法和属性。（实践过）<br> </p> <p>&nbsp; 当父类与子类有同名的方法或属性时，优先访问本类的方法或属性<br> </p> <div> 作者：luguo0816 发表于2012/3/15 12:12:21 <a href="http://blog.csdn.net/luguo0816/article/details/7356437">原文链接</a> </div> <div> 阅读：1869 评论：1 <a href="http://blog.csdn.net/luguo0816/article/details/7356437#comments" target="_blank">查看评论</a> </div> <![CDATA[[转]mysql字段长度--显示宽度（M）和保存值]]> http://blog.csdn.net/luguo0816/article/details/7329462 http://blog.csdn.net/luguo0816/article/details/7329462 luguo0816 2012/3/7 16:30:57 <p><a target="_blank" href="http://www.yesky.com/imagesnew/software/mysql/manual_Reference.html">http://www.yesky.com/imagesnew/software/mysql/manual_Reference.html</a></p> <p><span style="font-size:18px; color:#FF0000">utf8,一个汉字需要三个字节</span><br> </p> <p>作为对ANSI/ISO SQL92标准的扩展，MySQL也支持上表所列的整型类型TINYINT、MEDIUMINT和BIGINT。另一个扩展是MySQL支持可选地指定一个整型&#20540;显示的宽度，用括号跟在基本关键词之后(例如，INT(4))。这个可选的宽度指定被用于其宽度小于列指定宽度的&#20540;得左填补显示，但是不限制能在列中被存储的&#20540;的范围，也不限制&#20540;将被显示的位数，其宽度超过列指定的宽度。当与可选的扩展属性ZEROFILL一起使用时，缺省的空&#26684;填补用零代替。例如，对于声明为INT(5) ZEROFILL的列，一个为4的&#20540;作为00004被检索。注意，如果你在一个整型列存储超过显示宽度的更大&#20540;，当MySQL对于某些复杂的联结(join)生成临时表时，你可能会遇到问题，因为在这些情况下，MySQL相信数据确实适合原来的列宽度。<br> </p> <p>*****************************************************************************************************************************************************************************************<a target="_blank" href="http://caixia.blog.51cto.com/2266345/759569"><br> </a></p> <p><a target="_blank" href="http://caixia.blog.51cto.com/2266345/759569">http://caixia.blog.51cto.com/2266345/759569</a><br> </p> <p><br> </p> <p>MySQL支持所有标准SQL数&#20540;数据类型。这些类型包括严&#26684;数&#20540;数据类型(INTEGER、SMALLINT、DECIMAL和NUMERIC)，以及近&#20284;数&#20540;数据类型(FLOAT、REAL和DOUBLE PRECISION)。关键字INT是INTEGER的同义词，关键字DEC是DECIMAL的同义词。</p> <br> BIT数据类型保存位字段&#20540;，并且支持MyISAM、MEMORY、InnoDB和BDB表。<br> <br> 作为SQL标准的扩展，MySQL也支持整数类型TINYINT、MEDIUMINT和BIGINT。下面的表显示了需要的每个整数类型的存储和范围。<br> TINYINT：1字节 非常小的正整数，带符号：-128~127，不带符号：0~255<br> SMALLINT：2字节 小整数，带符号：-32768~32767，不带符号：0~65535<br> MEDIUMINT：3字节 中等大小的整数，带符号：-8388608~8388607，不带符号：0~16777215<br> INT：4字节 标准整数，带符号：-2147483648~2147483647，不带符号：0~4294967295<br> BIGINT：8字节 大整数，带符号：-9223372036854775808~9233372036854775807，不带符号：0~18446744073709551615<br> FLOAT：4字节 单精度浮点数，最小非零&#20540;：&#43;-1.175494351E-38，最大非零&#20540;：&#43;-3.402823466E&#43;38<br> DOUBLE：8字节 双精度浮点数，最小非零&#20540;：&#43;-2.2250738585072014E-308，最大非零&#20540;：&#43;-1.7976931348623157E&#43;308<br> DECIMAL：M&#43;2字节 以字符串形式表示的浮点数，它的取&#20540;范围可变，由M和D的&#20540;决定。<br> <br> MySQL还支持选择在该类型关键字后面的括号内指定整数&#20540;的显示宽度(例如，INT(4))。该可选显示宽度规定用于显示宽度小于指定的列宽度的&#20540;时从左侧填满宽度。<br> <br> 显示宽度并不限制可以在列内保存的&#20540;的范围，也不限制超过列的指定宽度的&#20540;的显示。<br> <br> 当结合可选扩展属性ZEROFILL使用时， 默认补充的空&#26684;用零代替。例如，对于声明为INT(5) ZEROFILL的列，&#20540;4检索为00004。请注意如果在整数列保存超过显示宽度的一个&#20540;，当MySQL为复杂联接生成临时表时会遇到问题，因为在这些情况下MySQL相信数据适合原列宽度。<br> <br> 声明整型数据列时，我们可以为它指定个显示宽度M(1~255)，如INT(5)，指定显示宽度为5个字符,如果没有给它指定显示宽度，MySQL会为它 指定一个默认&#20540;。显示宽度只用于显示，并不能限制取&#20540;范围和占用空间，如：INT(3)会占用4个字节的存储空间，并且允许的最大&#20540;也不会是999,而是 INT整型所允许的最大&#20540;。<br> <br> 为了节省存储空间和提高数据库处理效率，我们应该根据应用数据的取&#20540;范围来选择一个最适合的数据列类型。<br> 如果把一个超出数据列取&#20540;范围的数存入该列，则mysql就会截短该&#20540;，如：<br> 我们把99999存入smallint(3)数据列里，因为smallint(3)的取&#20540;范围是-32768——32767，所以<br> 就会被截短成32767存储。显示宽度3不会影响数组的存储。只影响显示<br> <div> 作者：luguo0816 发表于2012/3/7 16:30:57 <a href="http://blog.csdn.net/luguo0816/article/details/7329462">原文链接</a> </div> <div> 阅读：1094 评论：0 <a href="http://blog.csdn.net/luguo0816/article/details/7329462#comments" target="_blank">查看评论</a> </div> <![CDATA[[转]MySQL字段类型说明]]> http://blog.csdn.net/luguo0816/article/details/7327182 http://blog.csdn.net/luguo0816/article/details/7327182 luguo0816 2012/3/7 0:30:12 <p>《mysql技术内幕 第四版》page172<br> </p> <p>M，表示有效数字的最大个数。</p> <p>D，表示小数部分数字个数。<br> </p> <p>*****************************************************************************************************************************************************************************************</p> <p>数字单位制常用的有：中国数字单位制和国际数字单位制。<br> 中国数字单位制<br> 　　数字单位：“个”、“十”、“百”、“千”、“万”、“亿”、“兆”、&quot;京&quot;、&quot;垓&quot;<br> 　　单位进制：“万”以下为十进制，“万”以上为万进制，即 1亿 = 10000万，1兆 = 10000亿</p> <p>*****************************************************************************************************************************************************************************************<br> </p> <p><a target="_blank" href="http://info.mysql.cn/install/2006/0321/239.html">http://info.mysql.cn/install/2006/0321/239.html</a><br> </p> <p>MySQL支持大量的列类型，它可以被分为3类：数字类型、日期和时间类型以及字符串(字符)类型。本节首先给出可用类型的一个概述，并且总结每个列类型的存储需求，然后提供每个类中的类型性质的更详细的描述。概述有意简化，更详细的说明应该考虑到有关特定列类型的附加信息，例如你能为其指定&#20540;的允许&#26684;式。<br> <br> 由MySQL支持的列类型列在下面。下列代码字母用于描述中：<br> <br> M<br> 指出最大的显示尺寸。最大的合法的显示尺寸是 255 。<br> D<br> 适用于浮点类型并且指出跟随在十进制小数点后的数码的数量。最大可能的&#20540;是30，但是应该不大于M-2。<br> 方括号(“[”和“]”)指出可选的类型修饰符的部分。<br> <br> 注意，如果你指定一个了为ZEROFILL，MySQL将为该列自动地增加UNSIGNED属性。<br> <br> TINYINT[(M)] [UNSIGNED] [ZEROFILL]<br> 一个很小的整数。有符号的范围是-128到127，无符号的范围是0到255。<br> <br> <br> SMALLINT[(M)] [UNSIGNED] [ZEROFILL]<br> 一个小整数。有符号的范围是-32768到32767，无符号的范围是0到65535。<br> <br> MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]<br> 一个中等大小整数。有符号的范围是-8388608到8388607，无符号的范围是0到16777215。<br> <br> INT[(M)] [UNSIGNED] [ZEROFILL]<br> 一个正常大小整数。有符号的范围是-2147483648到2147483647，无符号的范围是0到4294967295。<br> <br> INTEGER[(M)] [UNSIGNED] [ZEROFILL]<br> 这是INT的一个同义词。<br> <br> BIGINT[(M)] [UNSIGNED] [ZEROFILL]<br> <br> 一个大整数。有符号的范围是-9223372036854775808到9223372036854775807，无符号的范围是0到<br> <br> 18446744073709551615。注意，所有算术运算用有符号的BIGINT或DOUBLE&#20540;完成，因此你不应该使用大于9223372036854775807（63位)的有符号大整数，除了位函数！注意，当两个参数是INTEGER&#20540;时，-、&#43;和*将使用BIGINT运算！这意味着如果你乘2个大整数(或来自于返回整数的函数)，如果结果大于9223372036854775807，你可以得到意外的结果。一个浮点数字，不能是无符号的，对一个单精度浮点数，其精度可以是&lt;=24，对一个双精度浮点数，是在25 和53之间，这些类型如FLOAT和DOUBLE类型马上在下面描述。FLOAT(X)有对应的FLOAT和DOUBLE相同的范围，但是显示尺寸和小数位数是未定义的。在MySQL3.23中，这是一个真正的浮点&#20540;。在更早的MySQL版本中，FLOAT(precision)总是有2位小数。该句法为了ODBC兼容性而提供。<br> <br> FLOAT[(M,D)] [ZEROFILL]<br> 一个小(单精密)浮点数字。不能无符号。允许的&#20540;是-3.402823466E&#43;38到-1.175494351E-38，0 和1.175494351E-38到3.402823466E&#43;38。M是显示宽度而D是小数的位数。没有参数的FLOAT或有&lt;24 的一个参数表示一个单精密浮点数字。<br> <br> DOUBLE[(M,D)] [ZEROFILL]<br> 一个正常大小(双精密)浮点数字。不能无符号。允许的&#20540;是-1.7976931348623157E&#43;308到-2.2250738585072014E-308、 0和2.2250738585072014E-308到1.7976931348623157E&#43;308。M是显示宽度而D是小数位数。没有一个参数的DOUBLE或FLOAT(X)（25 &lt; = X &lt; = 53）代表一个双精密浮点数字。<br> <br> DOUBLE PRECISION[(M,D)] [ZEROFILL]<br> 　<br> <br> REAL[(M,D)] [ZEROFILL]<br> 这些是DOUBLE同义词。<br> <br> DECIMAL[(M[,D])] [ZEROFILL]<br> 一个未压缩(unpack)的浮点数字。不能无符号。行为如同一个CHAR列：“未压缩”意味着数字作为一个字符串被存储，&#20540;的每一位使用一个字符。小数点，并且对于负数，“-”符号不在M中计算。如果D是0，&#20540;将没有小数点或小数部分。DECIMAL&#20540;的最大范围与DOUBLE相同，但是对一个给定的DECIMAL列，实际的范围可以通过M和D的选择被限制。如果D被省略，它被设置为0。如果M被省掉，它被设置为10。注意，在MySQL3.22里，M参数包括符号和小数点。<br> <br> NUMERIC(M,D) [ZEROFILL]<br> 这是DECIMAL的一个同义词。<br> <br> DATE<br> 一个日期。支持的范围是'1000-01-01'到'9999-12-31'。MySQL以'YYYY-MM-DD'&#26684;式来显示DATE&#20540;，但是允许你使用字符串或数字把&#20540;赋给DATE列。<br> <br> DATETIME<br> 一个日期和时间组合。支持的范围是'1000-01-01 00:00:00'到'9999-12-31 23:59:59'。MySQL以'YYYY-MM-DD HH:MM:SS'&#26684;式来显示DATETIME&#20540;，但是允许你使用字符串或数字把&#20540;赋给DATETIME的列。<br> <br> TIMESTAMP[(M)]<br> 一个时间戳记。范围是'1970-01-01 00:00:00'到2037年的某时。MySQL以YYYYMMDDHHMMSS、YYMMDDHHMMSS、YYYYMMDD或YYMMDD&#26684;式来显示TIMESTAMP&#20540;，取决于是否M是14（或省略)、12、8或6，但是允许你使用字符串或数字把&#20540;赋给TIMESTAMP列。一个TIMESTAMP列对于记录一个INSERT或UPDATE操作的日期和时间是有用的，因为如果你不自己给它赋&#20540;，它自动地被设置为最近操作的日期和时间。你以可以通过赋给它一个NULL&#20540;设置它为当前的日期和时间。<br> TIME<br> 一个时间。范围是'-838:59:59'到'838:59:59'。MySQL以'HH:MM:SS'&#26684;式来显示TIME&#20540;，但是允许你使用字符串或数字把&#20540;赋给TIME列。<br> <br> YEAR[(2|4)]<br> 一个2或4位数字&#26684;式的年(缺省是4位)。允许的&#20540;是1901到2155，和0000（4位年&#26684;式），如果你使用2位，1970-2069( 70-69)。MySQL以YYYY&#26684;式来显示YEAR&#20540;，但是允许你把使用字符串或数字&#20540;赋给YEAR列。（YEAR类型在MySQL3.22中是新类型。）<br> <br> CHAR(M) [BINARY]<br> 一个定长字符串，当存储时，总是是用空&#26684;填满右边到指定的长度。M的范围是1 ～ 255个字符。当&#20540;被检索时，空&#26684;尾部被删除。CHAR&#20540;根据缺省字符集以大小写不区分的方式排序和比较，除非给出BINARY关键词。NATIONAL CHAR（短形式NCHAR)是ANSI SQL的方式来定义CHAR列应该使用缺省字符集。这是MySQL的缺省。CHAR是CHARACTER的一个缩写。<br> <br> [NATIONAL] VARCHAR(M) [BINARY]<br> 一个变长字符串。注意：当&#20540;被存储时，尾部的空&#26684;被删除(这不同于ANSI SQL规范)。M的范围是1 ～ 255个字符。 VARCHAR&#20540;根据缺省字符集以大小写不区分的方式排序和比较，除非给出BINARY关键词&#20540;。 VARCHAR是CHARACTER VARYING一个缩写。<br> <br> TINYBLOB<br> 　<br> TINYTEXT<br> 一个BLOB或TEXT列，最大长度为255(2^8-1)个字符。<br> BLOB<br> 　<br> <br> TEXT<br> 一个BLOB或TEXT列，最大长度为65535(2^16-1)个字符。<br> <br> MEDIUMBLOB<br> 　<br> MEDIUMTEXT<br> 一个BLOB或TEXT列，最大长度为16777215(2^24-1)个字符。<br> LONGBLOB<br> 　<br> LONGTEXT<br> 一个BLOB或TEXT列，最大长度为4294967295(2^32-1)个字符。<br> <br> ENUM('value1','value2',...)<br> 枚举。一个仅有一个&#20540;的字符串对象，这个&#20540;式选自与&#20540;列表'value1'、'value2', ...,或NULL。一个ENUM最多能有65535不同的&#20540;。<br> <br> SET('value1','value2',...)<br> 一个集合。能有零个或多个&#20540;的一个字符串对象，其中每一个必须从&#20540;列表'value1', 'value2', ...选出。一个SET最多能有64个成员。<br> </p> <br> <div> 作者：luguo0816 发表于2012/3/7 0:30:12 <a href="http://blog.csdn.net/luguo0816/article/details/7327182">原文链接</a> </div> <div> 阅读：196 评论：0 <a href="http://blog.csdn.net/luguo0816/article/details/7327182#comments" target="_blank">查看评论</a> </div> <![CDATA[[转]session_set_save_handler]]> http://blog.csdn.net/luguo0816/article/details/7307262 http://blog.csdn.net/luguo0816/article/details/7307262 luguo0816 2012/2/29 18:41:28 <p><a target="_blank" href="http://topic.csdn.net/u/20081127/14/23222d65-0ac1-4446-b898-69bda2fb901f.html">http://topic.csdn.net/u/20081127/14/23222d65-0ac1-4446-b898-69bda2fb901f.html</a><br> </p> <p><br> </p> <p class="refpurpose"><span class="refname"></span></p> <pre name="code" class="php"> session_module_name('user'); //session文件保存方式，这个是必须的！除非在Php.ini文件中设置了 session_set_save_handler( array(&amp;$this, 'open'), //在运行session_start()时执行 array(&amp;$this, 'close'), //在脚本执行完成或调用session_write_close() 或 session_destroy()时被执行,即在所有session操作完后被执行 array(&amp;$this, 'read'), //在运行session_start()时执行,因为在session_start时,会去read当前session数据 array(&amp;$this, 'write'), //此方法在脚本结束和使用session_write_close()强制提交SESSION数据时执行 array(&amp;$this, 'destroy'), //在运行session_destroy()时执行 array(&amp;$this, 'gc') //执行概率由session.gc_probability 和 session.gc_divisor的值决定,时机是在open,read之后,session_start会相继执行open,read和gc ); session_start(); //这也是必须的，打开session，必须在session_set_save_handler后面执行</pre><br> <br> <br> <p></p> <p class="refpurpose"><span class="refname">************************************************************************************************************************************************************************************</span></p> <p class="refpurpose"><a target="_blank" href="http://cn.php.net/manual/en/function.session-set-save-handler.php">http://cn.php.net/manual/en/function.session-set-save-handler.php</a><br> <span class="refname"></span></p> <p class="refpurpose"><span class="refname"><br> </span></p> <p class="refpurpose"><span class="refname">session_set_save_handler</span> — <span class="dc-title"> Sets user-level session storage functions</span></p> <div class="refsect1 description" id="refsect1-function.session-set-save-handler-description"> <h3 class="title"><a class="toggler shown" href="http://cn.php.net/manual/en/function.session-set-save-handler.php#"><img src="http://cn.php.net/images/notes-reject.gif" alt="reject note"></a> Description</h3> <div class="methodsynopsis dc-description"><span class="type">bool</span> <span class="methodname"> <strong>session_set_save_handler</strong></span> ( <span class="methodparam"><span class="type"><a href="http://cn.php.net/manual/en/language.pseudo-types.php#language.types.callback" class="type callback">callback</a></span><tt class="parameter">$open</tt></span> , <span class="methodparam"><span class="type"><a href="http://cn.php.net/manual/en/language.pseudo-types.php#language.types.callback" class="type callback">callback</a></span><tt class="parameter">$close</tt></span> , <span class="methodparam"><span class="type"><a href="http://cn.php.net/manual/en/language.pseudo-types.php#language.types.callback" class="type callback">callback</a></span><tt class="parameter">$read</tt></span> , <span class="methodparam"><span class="type"><a href="http://cn.php.net/manual/en/language.pseudo-types.php#language.types.callback" class="type callback">callback</a></span><tt class="parameter">$write</tt></span> , <span class="methodparam"><span class="type"><a href="http://cn.php.net/manual/en/language.pseudo-types.php#language.types.callback" class="type callback">callback</a></span><tt class="parameter">$destroy</tt></span> , <span class="methodparam"><span class="type"><a href="http://cn.php.net/manual/en/language.pseudo-types.php#language.types.callback" class="type callback">callback</a></span><tt class="parameter">$gc</tt></span> )</div> <p class="para rdfs-comment">Since PHP 5.4 it is possible to register the following prototype:</p> <div class="methodsynopsis dc-description"><span class="type">bool</span> <span class="methodname"> <strong>session_set_save_handler</strong></span> ( <span class="methodparam"><span class="type"><a href="http://cn.php.net/manual/en/class.sessionhandlerinterface.php" class="type SessionHandlerInterface">SessionHandlerInterface</a></span><tt class="parameter">$sessionhandler</tt></span> [, <span class="methodparam"><span class="type">bool</span><tt class="parameter">$register_shutdown</tt><span class="initializer"> = true</span></span> ] )</div> <p class="para rdfs-comment"><span class="function"><strong>session_set_save_handler()</strong></span> sets the user-level session storage functions which are used for storing and retrieving data associated with a session. This is most useful when a storage method other than those supplied by PHP sessions is preferred. i.e. Storing the session data in a local database.</p> </div> <h3 class="title"><br> </h3> <p class="para">This function has two prototypes. </p> <dl><dt><span class="term"><em><tt class="parameter">sessionhandler</tt></em></span></dt><dd> <p class="para">An instance of a class implementing <span class="interfacename"><a href="http://cn.php.net/manual/en/class.sessionhandlerinterface.php" class="interfacename">SessionHandlerInterface</a></span>, such as<a href="http://cn.php.net/manual/en/class.sessionhandler.php" class="classname">SessionHandler</a>, to register as the session handler. Since PHP 5.4 only. </p> </dd><dt><span class="term"><em><tt class="parameter">register_shutdown</tt></em></span></dt><dd> <p class="para">Register <span class="function"><a href="http://cn.php.net/manual/en/function.session-register-shutdown.php" class="function">session_register_shutdown()</a></span> as a<span class="function"><a href="http://cn.php.net/manual/en/function.register-shutdown-function.php" class="function">register_shutdown_function()</a></span> function.</p> </dd></dl> or <dl><dt><span class="term"><em><tt class="parameter">open(string $savePath, string $sessionName)</tt></em></span></dt><dd> <p class="para">The open callback works like a constructor in classes and is executed when the session is being opened. It is the first callback function executed when the session is started automatically or manually with<span class="function"><a href="http://cn.php.net/manual/en/function.session-start.php" class="function">session_start()</a></span>. Return value is<strong><tt>TRUE</tt></strong> for success, <strong><tt>FALSE</tt></strong> for failure.</p> </dd><dt><span class="term"><em><tt class="parameter">close()</tt></em></span> </dt><dd> <p class="para">The close callback works like a destructor in classes and is executed after the session write callback has been called. It is also invoked when<span class="function"><a href="http://cn.php.net/manual/en/function.session-write-close.php" class="function">session_write_close()</a></span> is called. Return value should be<strong><tt>TRUE</tt></strong> for success, <strong> <tt>FALSE</tt></strong> for failure.</p> </dd><dt><span class="term"><em><tt class="parameter">read(string $sessionId)</tt></em></span></dt><dd> <p class="para">The <em><tt class="parameter">read</tt></em> callback must always return a session encoded (serialized) string, or an empty string if there is no data to read.</p> <p class="para">This callback is called internally by PHP when the session starts or when<span class="function"><a href="http://cn.php.net/manual/en/function.session-start.php" class="function">session_start()</a></span> is called. Before this callback is invoked PHP will invoke the<em><tt class="parameter">open</tt></em> callback. </p> <p class="para">The value this callback returns must be in exactly the same serialized format that was originally passed for storage to the<em><tt class="parameter">write</tt></em> callback. The value returned will be unserialized automatically by PHP and used to populate the $_SESSION superglobal. While the data looks similar to<span class="function"><a href="http://cn.php.net/manual/en/function.serialize.php" class="function">serialize()</a></span> please note it is a different format which is speficied in the<a href="http://cn.php.net/manual/en/session.configuration.php#ini.session.serialize-handler" class="link">session.serialize_handler</a> ini setting. </p> </dd><dt><span class="term"><em><tt class="parameter">write(string $sessionId, string $data)</tt></em></span></dt><dd> <p class="para">The <em><tt class="parameter">write</tt></em> callback is called when the session needs to be saved and closed. This callback receives the current session ID a serialized version the $_SESSION superglobal. The serialization method used internally by PHP is specified in the <a href="http://cn.php.net/manual/en/session.configuration.php#ini.session.serialize-handler" class="link"> session.serialize_handler</a> ini setting. </p> <p class="para">The serialized session data passed to this callback should be stored against the passed session ID. When retrieving this data, the<em><tt class="parameter">read</tt></em> callback must return the exact value that was originally passed to the<em><tt class="parameter">write</tt></em> callback. </p> <p class="para">This callback is invoked when PHP shuts down or explicitly when <span class="function"> <a href="http://cn.php.net/manual/en/function.session-write-close.php" class="function">session_write_close()</a></span> is called. Note that after executing this function PHP will internally execute the<em><tt class="parameter">close</tt></em> callback. </p> <blockquote class="note"> <p><strong class="note">Note</strong>: </p> <p class="para">The &quot;write&quot; handler is not executed until after the output stream is closed. Thus, output from debugging statements in the &quot;write&quot; handler will never be seen in the browser. If debugging output is necessary, it is suggested that the debug output be written to a file instead. </p> </blockquote> </dd><dt><span class="term"><em><tt class="parameter">destroy($sessionId)</tt></em></span></dt><dd> <p class="para">This callback is executed when a session is destroyed with <span class="function"> <a href="http://cn.php.net/manual/en/function.session-destroy.php" class="function">session_destroy()</a></span> or with<span class="function"><a href="http://cn.php.net/manual/en/function.session-regenerate-id.php" class="function">session_regenerate_id()</a></span> with the destroy parameter set to<strong><tt>TRUE</tt></strong>. Return value should be <strong><tt>TRUE</tt></strong> for success,<strong><tt>FALSE</tt></strong> for failure. </p> </dd><dt><span class="term"><em><tt class="parameter">gc($lifetime)</tt></em></span> </dt><dd> <p class="para">The garbage collector callback is invoked internally by PHP periodically in order to purge old session data. The frequency is controlled by<a href="http://cn.php.net/manual/en/session.configuration.php#ini.session.gc-probability" class="link">session.gc_probability</a> and <a href="http://cn.php.net/manual/en/session.configuration.php#ini.session.gc-divisor" class="link"> session.gc_divisor</a>. The value of lifetime which is passed to this callback can be set in<a href="http://cn.php.net/manual/en/session.configuration.php#ini.session.gc-maxlifetime" class="link">session.gc_maxlifetime</a>. Return value should be <strong><tt>TRUE</tt></strong> for success,<strong><tt>FALSE</tt></strong> for failure. </p> </dd></dl> <div> 作者：luguo0816 发表于2012/2/29 18:41:28 <a href="http://blog.csdn.net/luguo0816/article/details/7307262">原文链接</a> </div> <div> 阅读：798 评论：0 <a href="http://blog.csdn.net/luguo0816/article/details/7307262#comments" target="_blank">查看评论</a> </div> <![CDATA[[转]jQuery(function(){})与(function(){})(jQuery)的区别]]> http://blog.csdn.net/luguo0816/article/details/7299571 http://blog.csdn.net/luguo0816/article/details/7299571 luguo0816 2012/2/27 19:52:38 <p><a target="_blank" href="http://www.cnblogs.com/swjm119/archive/2011/12/19/2293125.html">http://www.cnblogs.com/swjm119/archive/2011/12/19/2293125.html</a><br> </p> <p><br> </p> <p><br> </p> <p>(function($){...})(jQuery)实际上是匿名函数</p> <p>相当于</p> <p>var func=function($){};</p> <p>func(jquery);<br> </p> <br> 这里实际上是匿名函数 function(arg){...} 这就定义了一个匿名函数，参数为arg 而调用函数时，是在函数后面写上括号和实参的，由于操作符的优先级，函数本身也需要用括号，即： (function(arg){...})(param) 这就相当于定义了一个参数为arg的匿名函数，并且将param作为参数来调用这个匿名函数 而(function($){...})(jQuery)则是一样的，之所以只在形参使用$，是为了不与其他库冲突，所以实参用jQuery var fn = function($){....}; fn(jQuery);<br> <div> 作者：luguo0816 发表于2012/2/27 19:52:38 <a href="http://blog.csdn.net/luguo0816/article/details/7299571">原文链接</a> </div> <div> 阅读：191 评论：0 <a href="http://blog.csdn.net/luguo0816/article/details/7299571#comments" target="_blank">查看评论</a> </div> <![CDATA[[原]php可以在类的定义外部添加属性]]> http://blog.csdn.net/luguo0816/article/details/7297581 http://blog.csdn.net/luguo0816/article/details/7297581 luguo0816 2012/2/27 12:03:00 <p>如下代码，</p> <p>&lt;?php</p> <p><br> </p> <p>class t1</p> <p>{</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public function tf($name)</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var_dump(property_exists($this,$name));//检查对象或类是否具有该属性<br> </p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br> </p> <p>}<br> </p> <p>$i=new t1();</p> <p>$i-&gt;tf('val');&nbsp;&nbsp; //输出false</p> <p>$i-&gt;val='';</p> <p>$i-&gt;tf('val');&nbsp;&nbsp; //输出true<br> </p> <p>?&gt;<br> </p> <br> <div> 作者：luguo0816 发表于2012/2/27 12:03:00 <a href="http://blog.csdn.net/luguo0816/article/details/7297581">原文链接</a> </div> <div> 阅读：226 评论：0 <a href="http://blog.csdn.net/luguo0816/article/details/7297581#comments" target="_blank">查看评论</a> </div>